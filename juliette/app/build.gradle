/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
    // JitPack
    maven { url 'https://jitpack.io' }
}

group 'com.github.afloarea'
version = '0.2.3-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

java {
//    modularity.inferModulePath = true
}

ext {
    vertxVersion = '4.4.1'
    junitVersion = "5.9.0"
    log4jVersion = "2.20.0"
//    jacksonVersion = "2.13.4"
    obgeVersion = "0.3.2"
    owaspEncoderVersion = '1.2.3'
}

dependencies {
    implementation platform("io.vertx:vertx-stack-depchain:$vertxVersion") // bom versions catalog

    implementation "io.vertx:vertx-core"
    implementation "com.fasterxml.jackson.core:jackson-databind" // optional dependency of vertx
    implementation "com.github.afloarea:open-backgammon-engine:$obgeVersion"
    implementation "org.owasp.encoder:encoder:$owaspEncoderVersion"

    // logging
    //        implementation "ch.qos.logback:logback-classic:$logbackVersion"
//    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"

    // testing
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "io.vertx:vertx-junit5"
    testImplementation "io.vertx:vertx-web"
}

application {
    mainModule = "com.github.afloarea.jackgammon.juliette"
    mainClass = "com.github.afloarea.jackgammon.juliette.App"
}

run {
    standardInput = System.in
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()

    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}
