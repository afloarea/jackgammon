/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.afloarea.jackgammon.juliette;

import com.github.afloarea.jackgammon.juliette.messages.client.PlayerJoinMessage;
import com.github.afloarea.jackgammon.juliette.messages.client.PlayerRollMessage;
import com.github.afloarea.jackgammon.juliette.messages.client.SelectMoveMessage;
import com.github.afloarea.jackgammon.juliette.messages.server.*;
import com.github.afloarea.jackgammon.juliette.verticles.MatchWatcherVerticle;
import com.github.afloarea.jackgammon.juliette.verticles.WebSocketVerticle;
import io.vertx.core.Vertx;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.eventbus.MessageCodec;
import io.vertx.core.json.Json;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
    private static final Logger LOG = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {
        final var vertx = Vertx.vertx();
        setUpCodecs(vertx);

        vertx.deployVerticle(MatchWatcherVerticle.class.getName()).onComplete(ar ->
                vertx.deployVerticle(WebSocketVerticle.class.getName()));

    }

    private static void setUpCodecs(Vertx vertx) {
        setUpCodecForClass(vertx, PlayerJoinMessage.class);
        setUpCodecForClass(vertx, PlayerRollMessage.class);
        setUpCodecForClass(vertx, SelectMoveMessage.class);
        setUpCodecForClass(vertx, InitGameMessage.class);
        setUpCodecForClass(vertx, PromptRollMessage.class);
        setUpCodecForClass(vertx, NotifyRollMessage.class);
        setUpCodecForClass(vertx, PromptMoveMessage.class);
        setUpCodecForClass(vertx, NotifyMoveMessage.class);
        setUpCodecForClass(vertx, NotifyGameEndedMessage.class);
    }

    private static <T> void setUpCodecForClass(Vertx vertx, Class<T> targetClass) {
        vertx.eventBus().registerDefaultCodec(targetClass, new LocalImmutableCodec<>(targetClass));
    }

    private static final class LocalImmutableCodec<T> implements MessageCodec<T, T> {
        private final Class<T> codecClass;

        public LocalImmutableCodec(Class<T> codecClass) {
            this.codecClass = codecClass;
        }

        @Override
        public void encodeToWire(Buffer buffer, T t) { // not called for local usage
            buffer.appendBuffer(Json.encodeToBuffer(t));
        }

        @Override
        public T decodeFromWire(int pos, Buffer buffer) { // not called for local usage
            return Json.decodeValue(buffer, codecClass);
        }

        @Override
        public T transform(T t) { // called for local usage within the same application instance
            return t;
        }

        @Override
        public String name() {
            return codecClass.getSimpleName();
        }

        @Override
        public byte systemCodecID() {
            return -1; // custom user codec must return -1
        }
    }
}
